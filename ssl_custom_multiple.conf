worker_processes  4;
daemon off;

error_log logs/error.log notice;

events {
    worker_connections 1024;
}
http {
    # from CloudFlare cipher list :
    # https://raw.githubusercontent.com/cloudflare/sslconfig/master/conf
    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                 EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers   on;

    # configuration
    server {
        listen 443 ssl;

        
        server_name idads.my.id;
        ssl_certificate         certs/idads.my.id/idads.crt;
        ssl_certificate_key     certs/idads.my.id/private.pem;

        ssl_certificate_by_lua_block {
            local ssl = require "ngx.ssl"

            -- local directory
            local CERT_DIRECTORY = 'conf/certs/'
            
            local function load_cert(name)
                -- load from disk as a demo. You should probably load it
                -- from a local redis / memcache

                -- load cert
                local f, err = io.open(CERT_DIRECTORY .. name .. ".my.id/" .. name ..'.crt')
                if not f then
                    return nil, err
                end

                -- "*a": reads the whole file
                local cert = f:read("*a")

                f:close()

                -- load key
                local f, err = io.open(CERT_DIRECTORY .. name .. ".my.id/" .. 'private.pem')
                if not f then
                    return nil, err
                end

                local key = f:read("*a")

                f:close()

                return {
                    cert = cert,
                    key = key,
                }
            end
            local function load_cert_matching(name)
                -- call function and assign data
                local cert_data = load_cert(name)
                if cert_data then
                    return cert_data
                end
            end
           

           -- clear existing cert
           -- clear the fallback certificates and private keys
            -- set by the ssl_certificate and ssl_certificate_key
            -- directives above:
            local ok, err = ssl.clear_certs()
            if not ok then
                ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
                return ngx.exit(ngx.ERROR)
            end

            -- Get TLS SNI (Server Name Indication) name set by the client
            local domain, err = ssl.server_name()
            if not domain then
                ngx.log(ngx.ERR, "failed to get SNI, err: ", err)
                return ngx.exit(ngx.ERROR)
            end

            print("SNI: ", domain)
            -- split function 
            local example = {}
            local a = 0
            for i in string.gmatch(domain, "%a+") do
                example[a] = i
                a = a + 1
            end
            local name = example[0]
            
            local cert_data = load_cert_matching(name)
            if not cert_data then
                ngx.log(ngx.ERR, "Unable to load suitable cert for: ", name)
                return ngx.exit(ngx.ERROR)
            end

            local der_cert_chain, err = ssl.cert_pem_to_der(cert_data.cert)
            if not der_cert_chain then
                ngx.log(ngx.ERR, "Unable to load PEM for: ", name,
                        ", err: ", err)
                return ngx.exit(ngx.ERROR)
            end

            local ok, err = ssl.set_der_cert(der_cert_chain)
            if not ok then
                ngx.log(ngx.ERR, "Unable te set cert for: ", name,
                        ", err: ", err)
                return ngx.exit(ngx.ERROR)
            end

            local der_priv_key, err = ssl.priv_key_pem_to_der(cert_data.key)
            if not der_priv_key then
                ngx.log(ngx.ERR, "Unable to load PEM KEY for: ", name,
                        ", err: ", err)
                return ngx.exit(ngx.ERROR)
            end

            local ok, err = ssl.set_der_priv_key(der_priv_key)
            if not ok then
                ngx.log(ngx.ERR, "Unable te set cert key for: ", name,
                        ", err: ", err)
                return ngx.exit(ngx.ERROR)
            end
        }
        location / {
            proxy_pass http://127.0.0.1:8000;
        }
     }

    include backend.conf;
}