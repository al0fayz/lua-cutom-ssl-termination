user www-data;
worker_processes  1;
# daemon off;

error_log logs/error.log notice;

events {
    worker_connections 1024;
}
http {
    include mime.types;
    # configuration
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    default_type  application/octet-stream;

    gzip  on;
    gzip_disable "msie6";

    # from CloudFlare cipher list :
    # https://raw.githubusercontent.com/cloudflare/sslconfig/master/conf
    ssl_protocols               TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers                 EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers   on;

    # configuration
    server {
        listen 8000 default_server;
        listen [::]:8000 default_server;
        listen 443 ssl;


        client_body_buffer_size 512k;
        client_max_body_size 512k;

        index index.php index.html index.htm index.nginx-debian.html;
        
        root /var/www/Website-builder-V2/public;

        charset utf-8;
        
        # serve static files directly
        location ~* \.(jpg|jpeg|gif|css|png|js|ico|html)$ {
            access_log off;
            expires max;
            log_not_found off;
        }

        # removes trailing slashes (prevents SEO duplicate content issues)
        if (!-d $request_filename)
        {
            rewrite ^/(.+)/$ /$1 permanent;
        }

        # enforce NO www
        if ($host ~* ^www\.(.*))
        {
            set $host_without_www $1;
            rewrite ^/(.*)$ $scheme://$host_without_www/$1 permanent;
        }

        # unless the request is for a valid file (image, js, css, etc.), send to bootstrap
        if (!-e $request_filename)
        {
            rewrite ^/(.*)$ /index.php?/$1 last;
            break;
        }

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~* \.php$ {
            try_files $uri = 404;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_pass unix:/run/php/php7.2-fpm.sock; # may also be: 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
        location @rewrites {
            rewrite ^(.+)$ /index.html last;
        } 
        location ~ /\.ht {
            deny all;
        }
        
        location = /favicon.ico { access_log off; log_not_found off; }
        location = /robots.txt  { access_log off; log_not_found off; }

        error_page 404 /index.php;

        
        server_name _;
        # redirect http to https
        
        if ($http_x_forwarded_proto = "http") {
            return 301 https://$server_name$request_uri;
        }

        ssl_certificate         /var/www/Website-builder-V2/storage/ssl/domain.id/domain.crt;
        ssl_certificate_key     /var/www/Website-builder-V2/storage/ssl/domain.id/domain.key;


        ssl_certificate_by_lua_block {
            -- example program for website builder (https://bikin.domain.id)
            local ssl = require "ngx.ssl"
                        
            -- local directory
            local CERT_DIRECTORY = '/var/www/Website-builder-V2/storage/ssl/'

            -- load cert
            local function load_cert(name)
                -- load certificate
                local f, err = io.open(CERT_DIRECTORY .. name .. "/certificate.crt")
                if not f then
                    return nil, err
                end

                -- "*a": reads the whole file
                local cert = f:read("*a")

                f:close()

                -- load ca bundle
                local f, err = io.open(CERT_DIRECTORY .. name .. "/ca_bundle.crt")
                if not f then
                    return nil, err
                end

                -- "*a": reads the whole file
                local ca_bundle = f:read("*a")

                f:close()

                -- load private key
                local f, err = io.open(CERT_DIRECTORY .. name .. "/private_key.pem")
                if not f then
                    return nil, err
                end

                local key = f:read("*a")

                f:close()

                return {
                    cert = cert.. "\n"..ca_bundle,
                    key = key,
                }
            end
            local function load_cert_matching(name)
                -- call function and assign data
                local cert_data = load_cert(name)
                if cert_data then
                    return cert_data
                end

            end

            -- Get TLS SNI (Server Name Indication) name set by the client
            local domain, err = ssl.server_name()
            if not domain then
                ngx.log(ngx.ERR, "failed to get SNI, err: ", err)
                return ngx.exit(ngx.ERROR)
            end

            print("SNI: ", domain)
            local defaul_domain = "dev-bikin.domain.id"
            local name = domain
            if domain ~= defaul_domain then

                -- load cert
                local cert_data = load_cert_matching(name)
                if not cert_data then
                    ngx.log(ngx.ERR, "Unable to load suitable cert for: ", name)
                    return ngx.exit(ngx.ERROR)
                end
                -- clear existing cert 

                local ok, err = ssl.clear_certs()
                if not ok then
                    ngx.log(ngx.ERR, "failed to clear existing (fallback) certificates")
                    return ngx.exit(ngx.ERROR)
                end



                -- cert process
                local der_cert_chain, err = ssl.cert_pem_to_der(cert_data.cert)
                if not der_cert_chain then
                    ngx.log(ngx.ERR, "Unable to load certificate for: ", name,
                            ", err: ", err)
                    return ngx.exit(ngx.ERROR)
                end

                local ok, err = ssl.set_der_cert(der_cert_chain)
                if not ok then
                    ngx.log(ngx.ERR, "Unable te set cert for: ", name,
                            ", err: ", err)
                    return ngx.exit(ngx.ERROR)
                end

                -- private key process
                local der_priv_key, err = ssl.priv_key_pem_to_der(cert_data.key)
                if not der_priv_key then
                    ngx.log(ngx.ERR, "Unable to load Private Key for: ", name,
                            ", err: ", err)
                    return ngx.exit(ngx.ERROR)
                end

                local ok, err = ssl.set_der_priv_key(der_priv_key)
                if not ok then
                    ngx.log(ngx.ERR, "Unable te set Private key for: ", name,
                            ", err: ", err)
                    return ngx.exit(ngx.ERROR)
                end
            end
        }

     }

}